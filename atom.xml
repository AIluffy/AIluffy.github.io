<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜗牛🐌</title>
  
  <subtitle>我要，一步一步往上爬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://love2ai.com/"/>
  <updated>2019-04-10T07:57:44.149Z</updated>
  <id>https://love2ai.com/</id>
  
  <author>
    <name>AI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise.prototype.finally &amp; Promise.prototype.done小探</title>
    <link href="https://love2ai.com/2019/04/10/Promise.prototype.finally%20&amp;%20Promise.prototype.done%E5%B0%8F%E6%8E%A2/"/>
    <id>https://love2ai.com/2019/04/10/Promise.prototype.finally &amp; Promise.prototype.done小探/</id>
    <published>2019-04-10T15:52:47.000Z</published>
    <updated>2019-04-10T07:57:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>Promise 已经像血液一样融入到我们的日常工作中，thenable 无时无刻不在发挥着它的作用。网络上关于 Promise 的文章也是汗牛充栋，人们一遍又一遍的咀嚼着 Promise.prototype.then, Promise.prototype.catch 的作用和功效。</p><p>很多时候，我们的执行函数会是 p.then(onFulfilled).catch(onRejected)这种形式，<a id="more"></a> 并不会链接太多操作，这有点像 try 语句。</p><p>有时候，我们希望一个操作，无论是否抛出异常都会执行，即不管它进入了 resolve，还是 reject，下一步操作都会执行。比如我们发送请求之前会出现一个 loading 图，当我们请求发送完成之后，不管请求有没有出错，我们都希望关掉这个 loading 图以提升用户体验。过去我们可以这么做：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span></span><br><span class="line"></span><br><span class="line">request()</span><br><span class="line">  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// do something</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// log err</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这种写法一点也不 DRY，显得丑陋。为了让代码稍微好看一点，我们也可以这么写：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span></span><br><span class="line"></span><br><span class="line">request()</span><br><span class="line">  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// log err</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这么写虽然让我们舒服了点，但是，总感觉哪里怪怪的，总觉得.then 后面还有.catch。作为类比，我们可以看一下 try 语句的三种声明形式：</p><ol><li>Try…catch</li><li>Try…finally</li><li>Try…catch…finally</li></ol><p>那么问题来了，为什么 Promise 没有实现 finally 的写法，用于在任何情况下（不论成功或者失败）执行特定后续操作。这样在语义上，代码显得更加直观与合理。</p><p>好消息是，Promise.prototype.finally 已于 2018/01/24 进入 ES8 的 stage4 阶段。半数以上的浏览器也做出了兼容。我们现在就可以尝鲜使用了。</p><p>于是上面的例子就变成了这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span></span><br><span class="line"></span><br><span class="line">request()</span><br><span class="line">  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// log err</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>看起来好像也没有什么区别，但其实使用 Promise.finally(onFinally) 和 Promise.then(onFulfilled, onRejected)还是有以下几点不同：</p><ol><li>调用内联函数时，不需要多次声明该函数或为该函数创建一个变量保存它。</li><li>由于无法知道 promise 的最终状态，所以 finally 的回调函数中不接收任何参数，它仅用于无论最终结果如何都要执行的情况。</li><li>与 Promise.resolve(2).then(() =&gt; {}, () =&gt; {}) （resolved 的结果为 undefined）不同，Promise.resolve(2).finally(() =&gt; {}) resolved 的结果为 2。</li><li>同样，Promise.reject(3).then(() =&gt; {}, () =&gt; {}) (resolved 的结果为 undefined), Promise.reject(3).finally(() =&gt; {}) rejected 的结果为 3。</li></ol><p>1、2 两点容易理解，至于 3、4，可以通过下面的两个例子进行说明：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">'foo'</span>).</span><br><span class="line">  <span class="hljs-keyword">finally</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">'bar'</span>).</span><br><span class="line">  then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(res));</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'foo'</span>)).</span><br><span class="line">  <span class="hljs-keyword">finally</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">'bar'</span>).</span><br><span class="line">  <span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(err.message));</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 最终打印的是‘foo’而不是‘bar'，因为finally()会透传fullfilled的值和rejected错误</span></span><br></pre></td></tr></table></figure><p>如果浏览器没有实现 finally，那么可以实现 polyfill：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Promise</span>.prototype.finally !== <span class="hljs-string">'function'</span>) &#123;</span><br><span class="line">  <span class="hljs-built_in">Promise</span>.prototype.finally = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">onFinally</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.then(</span><br><span class="line">      <span class="hljs-comment">/* onFulfilled */</span></span><br><span class="line">      res =&gt; <span class="hljs-built_in">Promise</span>.resolve(onFinally()).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> res),</span><br><span class="line">      <span class="hljs-comment">/* onRejected */</span></span><br><span class="line">      err =&gt; <span class="hljs-built_in">Promise</span>.resolve(onFinally()).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err; &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过该 polyfill，可以更加理解为什么 finally()会透传 fullfilled 的值和 rejected 错误。</p><p>Promise.prototype.finally()会返回一个 promise 对象，Promise chain 会延续下去。但是如果我们不想这条 Promise chain 继续执行下去，而想在执行一个操作后关闭 Promise chain。这种时候就需要用到 Promise.prototype.done().</p><p>Promise.prototype.done 的使用方法和 then 一样，但是该方法不会返回 Promise 对象。</p><p>实现 Promise.prototype.done 的 polyfill 如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Promise</span>.prototype.done === <span class="hljs-string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="hljs-built_in">Promise</span>.prototype.done = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.then(onFulfilled, onRejected).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> error;</span><br><span class="line">            &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Promise.prototype.done 和 Promise.prototype.finally 存在两点不同：</p><ol><li>done 并不返回 promise 对象，也就是说，在 done 之后不能使用 then，catch 等方法组成方法链。</li><li>done 中发送的异常会被直接抛给外部，也就是说，其不会进行 Promise 的错误处理（Error Handling）</li></ol><blockquote><p>由于 Promise 的 try-catch 机制，出错的问题可能会被内部消化掉。 如果在调用的时候每次都无遗漏的进行 catch 处理的话当然最好了，但是如果在实现的过程中出现了这个例子中的错误的话，那么进行错误排除的工作也会变得困难。这种错误被内部消化的问题也被称为 unhandled rejection ，从字面上看就是在 Rejected 时没有找到相应处理的意思。 - promise 迷你书</p></blockquote><p>以上便是 Promise.prototype.finally 和 Promise.prototype.done 的介绍和说明，也许实际使用的频率不会很高，但是为了高可读的代码，大家不妨一试。 (ゝ ∀･)</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://liubin.org/promises-book/#promise-done" target="_blank" rel="noopener">promise 迷你书</a></li><li><a href="https://github.com/tc39/proposal-promise-finally" target="_blank" rel="noopener">proposal-promise-finally</a></li><li><a href="http://thecodebarbarian.com/using-promise-finally-in-node-js.html" target="_blank" rel="noopener">using-promise-finally-in-node-js.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally" target="_blank" rel="noopener">MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promise 已经像血液一样融入到我们的日常工作中，thenable 无时无刻不在发挥着它的作用。网络上关于 Promise 的文章也是汗牛充栋，人们一遍又一遍的咀嚼着 Promise.prototype.then, Promise.prototype.catch 的作用和功效。&lt;/p&gt;
&lt;p&gt;很多时候，我们的执行函数会是 p.then(onFulfilled).catch(onRejected)这种形式，&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://love2ai.com/tags/Javascript/"/>
    
      <category term="技术" scheme="https://love2ai.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>离线应用技术之——IndexedDB</title>
    <link href="https://love2ai.com/2019/04/02/%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF%E4%B9%8B%E2%80%94%E2%80%94IndexedDB/"/>
    <id>https://love2ai.com/2019/04/02/离线应用技术之——IndexedDB/</id>
    <published>2019-04-02T14:22:04.000Z</published>
    <updated>2019-04-10T07:57:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>想要构建离线应用，除了使用service worker，另一个绕不开的话题便是IndexedDB。</p><p>IndexedDB是浏览器端的一个基于键值对存储的<strong>事务型</strong>数据库。为什么要用它，因为想要做到在离线情况下展示数据，数据的持久化是离线应用绕不过去的一个坎。以前使用的是Web SQL，不过它已经被废弃掉了，所以never mind。什么，你说localstorage？确实有很多人会使用localstorage来存储数据，但是相比IndexedDB，它存在很大的不足，<a id="more"></a>原因有三：</p><ol><li><p>localstorage 存储有大小限制，限制5MB，不能存储大量数据，尤其是带有结构的数据。</p></li><li><p>没有查询语句，没有schema，基本上没有任何有关数据库的操作。每次的写入和写出都要字符串化和对象化，何其麻烦。所以在处理带结构的大型数据上基本毫无扩展性。</p></li><li><p>最关键的一点是，localstorage的API是同步的，这就意味着它会阻塞DOM操作。并且很多时候，离线应用的数据操作需要在service worker中进行，service worker只接受异步的API，所以相较而言，IndexedDB是更好的选择。</p></li></ol><p>下面这张表摘自<a href="http://www.zhangxinxu.com/wordpress/2017/07/html5-indexeddb-js-example/" target="_blank" rel="noopener">张鑫旭的博文</a>，改装了一下，可以快速了解IndexeDB的一些基础特性。</p><table><thead><tr><th></th><th style="text-align:left">IndexedDB</th></tr></thead><tbody><tr><td><strong>优点</strong></td><td style="text-align:left">1. 允许对象的快速索引和搜索，因此在Web应用程序场景中，您可以非常快速地管理数据以及读取/写入数据；2. 由于是NoSQL数据库，因此我们可以根据实际需求设定我们的JavaScript对象和索引；3. 在异步模式下工作，每个事务具有适度的粒状锁。这允许您在JavaScript的事件驱动模块内工作。</td></tr><tr><td><strong>不足</strong></td><td style="text-align:left">如果你的世界观里面只有关系型数据库，恐怕不太容易理解。</td></tr><tr><td><strong>位置</strong></td><td style="text-align:left">包含JavaScript对象和键的存储对象。</td></tr><tr><td><strong>查询机制</strong></td><td style="text-align:left">Cursor APIs，Key Range APIs，应用程序代码</td></tr><tr><td><strong>事务</strong></td><td style="text-align:left">锁可以发生在数据库版本变更事务，或是存储对象“只读”和“读写”事务时候。</td></tr><tr><td><strong>事务提交</strong></td><td style="text-align:left">事务创建是显式的。默认是提交，除非我们调用中止或有一个错误没有被捕获。</td></tr></tbody></table><p>也许，上表中说到的一些概念你还不是很懂。嘿，您先别急，先坐下，且听我慢慢给您说。</p><p><strong>Q1</strong>：什么是NoSQL数据库？<br><strong>A1</strong>：非关系型数据库，其中的一大类便是通过键值（key-value）存储数据。IndexedDB便是属于这一类。</p><p><strong>Q2</strong>：什么是事务？<br><strong>A2</strong>：指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。它有以下四点特性：</p><ul><li>原子性(Atomicity)：事务中的所有操作作为一个整体提交或回滚。</li><li>一致性(Consistemcy)：事物完成时，数据必须是一致的，以保证数据的无损。</li><li>隔离性(Isolation)：对数据进行修改的多个事务是彼此隔离的。</li><li>持久性(Durability)：事务完成之后，它对于系统的影响是永久的，该修改即使出现系统故障也将一直保留。</li></ul><p><strong>Q3</strong>：Cursor是干嘛用的？<br><strong>A3</strong>：cursor即游标，类似于现实中的游标，一个刻度表示一行数据，游标就是尺子上的一片区域，想要获得数据库一行一行的数据，我们可以遍历这个游标就好了。</p><p>前菜上的差不多了，现在进入我们的正餐部分。</p><h3 id="如何使用IndexedDB？"><a href="#如何使用IndexedDB？" class="headerlink" title="如何使用IndexedDB？"></a>如何使用IndexedDB？</h3><p>使用IndexedDB其实还蛮简单的，你只需要做两件事：</p><ol><li><p>创建或打开一个数据库</p></li><li><p>创建一个Object Store对象仓库（它是IndexedDB存储数据的机制，习惯了关系型数据库的同学可以把它想象成一张表）</p></li></ol><p><img src="https://i.stack.imgur.com/zGJPJ.png" alt="IndexedDB"></p><p>遵循上面两步，我们便可以开始愉快的使用IndexedDB了。代码如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 创建或使用一个数据库</span></span><br><span class="line"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">window</span>.indexedDB.open(<span class="hljs-string">"todos"</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 创建schema, 如果浏览器没有找到todos数据库，则它会创建一个，同时触发upgradeneeded事件。</span></span><br><span class="line">request.onupgradeneeded = <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">//db代表的是与数据库的连接</span></span><br><span class="line">  <span class="hljs-keyword">const</span> db = event.target.result;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//首先检测是否存在我们要创建的Object Store</span></span><br><span class="line">  <span class="hljs-keyword">if</span>(!db.objectStoreNames.contains(<span class="hljs-string">"todo-meta"</span>)) &#123;</span><br><span class="line">    <span class="hljs-comment">//通过createObjectStore方法创建ObjectStore对象来存储对象</span></span><br><span class="line">    <span class="hljs-keyword">const</span> todoStore = db.createObjectStore(<span class="hljs-string">'todo-meta'</span>, &#123;<span class="hljs-attr">keyPath</span>: <span class="hljs-string">'id'</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//使用index来检索数据，createIndex方法接受两个参数，一个代表index的name，一个代表要被indexed的属性</span></span><br><span class="line">    todoStore.createIndex(<span class="hljs-string">'nameIdx'</span>, <span class="hljs-string">'name'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span>(!db.objectStoreNames.contains(<span class="hljs-string">"todo-items"</span>)) &#123;</span><br><span class="line">    <span class="hljs-comment">// keyPath也可以传递一个数组，来共同组成可以索引</span></span><br><span class="line">    <span class="hljs-keyword">const</span> itemStore = db.createObjectStore(</span><br><span class="line">        <span class="hljs-string">"todo-items"</span>,</span><br><span class="line">        &#123; <span class="hljs-attr">keyPath</span>: [ <span class="hljs-string">"todoId"</span>, <span class="hljs-string">"row"</span> ] &#125;</span><br><span class="line">    );</span><br><span class="line">    itemStore.createIndex(<span class="hljs-string">"todoIndex"</span>, <span class="hljs-string">"todoId"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="hljs-keyword">if</span>(!db.objectStoreNames.contains(<span class="hljs-string">"attachments"</span>)) &#123;</span><br><span class="line">    <span class="hljs-comment">// 不传keypath也行，交由数据库自己处理key，适合于一些文件内容的存储。</span></span><br><span class="line">    <span class="hljs-keyword">const</span> fileStore = db.createObjectStore(</span><br><span class="line">        <span class="hljs-string">"attachments"</span>,</span><br><span class="line">        &#123; <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">true</span> &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧，我撒谎了，从代码上看，使用IndexedDB并不是那么简单啊，这还是在我没有考虑兼容性的情况下，而忽略了以下这么一大段代码。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">// In the following line, you should include the prefixes of implementations you want to test.</span></span><br><span class="line"><span class="hljs-built_in">window</span>.indexedDB = <span class="hljs-built_in">window</span>.indexedDB || <span class="hljs-built_in">window</span>.mozIndexedDB || <span class="hljs-built_in">window</span>.webkitIndexedDB || <span class="hljs-built_in">window</span>.msIndexedDB;</span><br><span class="line">  <span class="hljs-comment">// DON'T use "var indexedDB = ..." if you're not in a function.</span></span><br><span class="line">  <span class="hljs-comment">// Moreover, you may need references to some window.IDB* objects:</span></span><br><span class="line"><span class="hljs-built_in">window</span>.IDBTransaction = <span class="hljs-built_in">window</span>.IDBTransaction || <span class="hljs-built_in">window</span>.webkitIDBTransaction || <span class="hljs-built_in">window</span>.msIDBTransaction;</span><br><span class="line"><span class="hljs-built_in">window</span>.IDBKeyRange = <span class="hljs-built_in">window</span>.IDBKeyRange || <span class="hljs-built_in">window</span>.webkitIDBKeyRange || <span class="hljs-built_in">window</span>.msIDBKeyRange;</span><br><span class="line">  <span class="hljs-comment">// (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)</span></span><br></pre></td></tr></table></figure><p>来自中外各大名宿的吐槽，IndexedDB的API是出了名的膈应人。就比如说新建一个数据库，为啥我要给它取名叫request而不是idb之类的。事实上，对IndexedDB来说，新建数据库是一个request请求，用MDN的原话是，<code>IndexedDB uses a lot of requests</code>。通过这些请求，它能够获取到相应的DOM事件，从而判断该操作是成功了还是失败了。同时，这些请求也有readyState，result和errorCode等一系列属性。这怎么看都像是一个XMLHTTPRequest对象，简直不能再坑了。</p><p>吐槽归吐槽，我们还是认真看一下上一段代码做了什么。在连接数据库后，我们通过createObjectStore方法新建了三个对象仓储，第一个参数即为仓储名，第二个参数即为配置项，包含两个属性：1. keyPath，2. autoIncrement。keyPath用于指定对象的键，如果未指定，则对象的创建使用的是out-of-line keys；指定了，则使用in-line keys。至于什么是out-of-line keys和in-line keys，我们通过一图流来进行详细的说明。</p><p><img src="https://haitao.nos.netease.com/22c25240-834c-4676-ae60-215507fce160.png" alt="key"></p><p>可以这么理解，out-of-line keys即为单独生成的一个key，可能需要我们自己指定。而in-line keys则是指定对象的一个属性作为key值，由数据库自动绑定。</p><p>至于autoIncrement属性，可以看成一个key generator，自动生成key值。一般来说，keyPath和autoIncrement属性只要使用一个就够了，如果两个同时使用，表示键名为递增的整数，且对象不得缺少指定属性。</p><p>当然，除了使用key存储对象，也可以为对象指定index。就像上面代码中的createIndex做的那样，我们依然通过一图流来说明key和index的区别。</p><p><img src="https://haitao.nos.netease.com/150121c1-0d43-4758-987a-01505187998a.png" alt="entry"></p><p>可以看到，两者其实是同一份数据，只是由不同的属性索引，当需要检索某一特定属性的数据时，index格外有用。</p><p>下面讲讲如何进行数据库的CRUD操作，毕竟这才是我们真正关心的。</p><p>执行IndexedDB的CRUD操作只需要如下五步：</p><ol><li>与数据库建立连接</li><li>创建一个事务</li><li>指明Object Store</li><li>在该store上执行操作</li><li>清除数据库连接</li></ol><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1. 添加数据"></a>1. 添加数据</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">window</span>.indexedDB.open(<span class="hljs-string">"todos"</span>, <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> db = request.result;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// db.transaction的第一个参数是一个数组，表明我们希望事务执行操作的ObjectStore列表，通常是只有一个。第二个参数表明事务执行的操作，一般为readonly（只读）和readwrite（读写）</span></span><br><span class="line">    <span class="hljs-keyword">const</span> transaction = db.transaction(</span><br><span class="line">        [ <span class="hljs-string">"todo-meta"</span>, <span class="hljs-string">"todo-items"</span> ],</span><br><span class="line">        <span class="hljs-string">"readwrite"</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">   <span class="hljs-comment">// 事务使用的两个store</span></span><br><span class="line">    <span class="hljs-keyword">const</span> metaStore = transaction.objectStore(<span class="hljs-string">"todo-meta"</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> itemStore = transaction.objectStore(<span class="hljs-string">"todo-items"</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 新增数据</span></span><br><span class="line">    metaStore.add(</span><br><span class="line">        &#123; <span class="hljs-attr">todoDate</span>: <span class="hljs-number">112342392131</span>, <span class="hljs-attr">todoAuthor</span>: <span class="hljs-string">'luffy'</span> &#125;</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    itemStore.add(&#123;</span><br><span class="line">        todoId: <span class="hljs-number">1</span>,</span><br><span class="line">        row: <span class="hljs-number">1</span>,</span><br><span class="line">        name: <span class="hljs-string">'todo 1'</span>,</span><br><span class="line">        completed: <span class="hljs-literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 清除数据库连接</span></span><br><span class="line">    transaction.oncomplete = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h4 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2. 更新数据"></a>2. 更新数据</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...如上连接数据库，创建事务</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 这个操作会通过keypath来更新数据，itemStore的keyPath为属性todoId和row的结合，可以看到上个操作新建的todo item的completeed属性被更新为true</span></span><br><span class="line"><span class="hljs-keyword">const</span> itemStore = objectStore.put(&#123;</span><br><span class="line">      todoId: <span class="hljs-number">1</span>,</span><br><span class="line">      row: <span class="hljs-number">1</span>,</span><br><span class="line">      name: <span class="hljs-string">'todo 1'</span>,</span><br><span class="line">      completed: <span class="hljs-literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">// 当然，objectStore.put也可以接受第二个参数，表明对象的键，一般用于out-of-line key的情况。</span></span><br><span class="line">attachmentStore.put(VALUE, KEY);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...清除数据库连接</span></span><br></pre></td></tr></table></figure><h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...如上连接数据库，创建事务</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 大概是最简单的API了，指明我们要删除的key就行了</span></span><br><span class="line">itemStore.delete([ <span class="hljs-string">"123"</span>, <span class="hljs-string">"2"</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...清除数据库连接</span></span><br></pre></td></tr></table></figure><h4 id="4-读取数据"><a href="#4-读取数据" class="headerlink" title="4. 读取数据"></a>4. 读取数据</h4><p>读取操作有那么点不同，因为它会新建一个request，读取数据在request的回调中。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...如上连接数据库，创建事务</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 通过监听onsuccess来获取数据，通过键名获取指定数据</span></span><br><span class="line"><span class="hljs-keyword">const</span> getRequest = itemStore.get(<span class="hljs-string">"123"</span>);</span><br><span class="line"><span class="hljs-comment">// 也可以通过getAll方法获取全部数据</span></span><br><span class="line"><span class="hljs-keyword">const</span> getAllRequest = itemStore.getAll();</span><br><span class="line"></span><br><span class="line">getRequest.onsuccess = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 获取的数据在request的result属性中</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(getRequest.result);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-遍历数据"><a href="#5-遍历数据" class="headerlink" title="5. 遍历数据"></a>5. 遍历数据</h4><p>get()和getAll()可以获取单个数据或全部数据，但如果想进行更精细的读取操作，比如读取3-20范围的数据，则需要用到cursor及IDBKeyRange两个对象了。</p><p>索引的有用之处，在于可以指定读取数据的范围</p><p>IDBKeyRange对象的作用则是生成一个表示范围的Range对象。它的生成方法有四种</p><blockquote><p>lowerBound方法：指定范围的下限。<br>upperBound方法：指定范围的上限。<br>bound方法：指定范围的上下限。<br>only方法：指定范围中只有一个值。</p></blockquote><p>下面的代码直接摘自<a href="http://javascript.ruanyifeng.com/bom/indexeddb.html" target="_blank" rel="noopener">阮一峰老师的文章</a>，仅供参考</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// All keys ≤ x</span></span><br><span class="line"><span class="hljs-keyword">var</span> r1 = IDBKeyRange.upperBound(x);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys &lt; x</span></span><br><span class="line"><span class="hljs-keyword">var</span> r2 = IDBKeyRange.upperBound(x, <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys ≥ y</span></span><br><span class="line"><span class="hljs-keyword">var</span> r3 = IDBKeyRange.lowerBound(y);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys &gt; y</span></span><br><span class="line"><span class="hljs-keyword">var</span> r4 = IDBKeyRange.lowerBound(y, <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys ≥ x &amp;&amp; ≤ y</span></span><br><span class="line"><span class="hljs-keyword">var</span> r5 = IDBKeyRange.bound(x, y);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys &gt; x &amp;&amp;&lt; y</span></span><br><span class="line"><span class="hljs-keyword">var</span> r6 = IDBKeyRange.bound(x, y, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys &gt; x &amp;&amp; ≤ y</span></span><br><span class="line"><span class="hljs-keyword">var</span> r7 = IDBKeyRange.bound(x, y, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All keys ≥ x &amp;&amp;&lt; y</span></span><br><span class="line"><span class="hljs-keyword">var</span> r8 = IDBKeyRange.bound(x, y, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// The key = z</span></span><br><span class="line"><span class="hljs-keyword">var</span> r9 = IDBKeyRange.only(z);</span><br></pre></td></tr></table></figure><p>通过IDBKeyRange，结合cursor，便可以实现在一定范围内读取数据的操作了。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 想要遍历数据，就要openCursor方法，它在当前对象仓库里面建立一个读取光标（cursor）</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 绑定range</span></span><br><span class="line"><span class="hljs-keyword">var</span> range = IDBKeyRange.bound(<span class="hljs-string">'3'</span>, <span class="hljs-string">'20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> cursor = db.trasaction([<span class="hljs-string">'todo-item'</span>], <span class="hljs-string">'readOnly'</span>).objectStore(<span class="hljs-string">'todo-item'</span>).openCursor(range);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//回调函数接受一个事件对象作为参数，该对象的target.result属性指向当前数据对象。当前数据对象的key和value分别返回键名和键值（即实际存入的数据）。continue方法将光标移到下一个数据对象，如果当前数据对象已经是最后一个数据了，则光标指向null。</span></span><br><span class="line"></span><br><span class="line">cursor.onsuccess = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> res = e.target.result;</span><br><span class="line">    <span class="hljs-keyword">if</span>(res) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Key"</span>, res.key);</span><br><span class="line">        <span class="hljs-built_in">console</span>.dir(<span class="hljs-string">"Data"</span>, res.value);</span><br><span class="line">        res.continue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>终于把IndexedDB的API给走了一遍，基本上涵盖了我们日常开发的大部分操作，当然还有一部分API可以直接从<a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">MDN</a>上查阅。可以看到，这些API不可谓不繁琐，如果直接使用这些API，估计你们不是累死就是被气死。</p><p>正所谓哪里有压迫哪里就有反抗，我们的<a href="https://twitter.com/jaffathecake" target="_blank" rel="noopener">Jake Archibald</a>大神在官方的基础上封装了一个Promise风格的库–<a href="https://github.com/jakearchibald/idb" target="_blank" rel="noopener">idb</a>，可以方便开发者们按照现代JavaScript的方式使用IndexedDB。这里有<a href="https://medium.freecodecamp.org/a-quick-but-complete-guide-to-indexeddb-25f030425501" target="_blank" rel="noopener">一篇文章</a>便是基于这个库来介绍IndexedDB的，写的相当不错。</p><p>下面这行代码大概展示了使用idb来写出promise及async风格的代码，来源于<a href="https://medium.com/@filipvitas/indexeddb-with-promises-and-async-await-3d047dddd313" target="_blank" rel="noopener">medium</a>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAllData</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> db = <span class="hljs-keyword">await</span> idb.open(<span class="hljs-string">'db-name'</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> tx = db.transaction(<span class="hljs-string">'objectStoreName'</span>, <span class="hljs-string">'readonly'</span>)</span><br><span class="line">    <span class="hljs-keyword">let</span> store = tx.objectStore(<span class="hljs-string">'objectStoreName'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// add, clear, count, delete, get, getAll, getAllKeys, getKey, put</span></span><br><span class="line">    <span class="hljs-keyword">let</span> allSavedItems = <span class="hljs-keyword">await</span> store.getAll()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(allSavedItems)</span><br><span class="line"></span><br><span class="line">    db.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感兴趣的同学也可以看看这个简单的使用idb实现的<a href="https://github.com/AIluffy/todo-list-indexeddb" target="_blank" rel="noopener">todoList</a>。</p><p>以上，XD。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要构建离线应用，除了使用service worker，另一个绕不开的话题便是IndexedDB。&lt;/p&gt;
&lt;p&gt;IndexedDB是浏览器端的一个基于键值对存储的&lt;strong&gt;事务型&lt;/strong&gt;数据库。为什么要用它，因为想要做到在离线情况下展示数据，数据的持久化是离线应用绕不过去的一个坎。以前使用的是Web SQL，不过它已经被废弃掉了，所以never mind。什么，你说localstorage？确实有很多人会使用localstorage来存储数据，但是相比IndexedDB，它存在很大的不足，&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://love2ai.com/tags/Javascript/"/>
    
      <category term="技术" scheme="https://love2ai.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 高性能的秘密 — Dispose Pattern</title>
    <link href="https://love2ai.com/2019/03/18/VS%20Code%20%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%A7%98%E5%AF%86%20%E2%80%94%20Dispose%20Pattern/"/>
    <id>https://love2ai.com/2019/03/18/VS Code 高性能的秘密 — Dispose Pattern/</id>
    <published>2019-03-18T19:23:40.000Z</published>
    <updated>2019-04-10T07:57:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>VS Code 是微软出品的新一代轻量级编辑器，一出道便以简洁大气的界面、卓越的性能、以及灵活的可扩展性吸引了大批的拥趸。</p><p><img src="https://haitao.nos.netease.com/2b129013-9a04-467f-8b46-b0ebe43b5fea_225_224.png" alt="VS Code Icon"></p><p>插件化是 VS Code 的精髓，大部分功能比如 command、key binding、context menu 都是通过它对外提供的一套扩展<a href="https://code.visualstudio.com/api" target="_blank" rel="noopener">API</a>实现并集成到 Code 中。 <a id="more"></a> VS Code 使用多进程的架构来分别处理编辑器的渲染与执行，每开一个窗口，便会为该窗口创建一个进程执行插件，该进程即为 Extension Host。Extension Host 按需激活插件，同一时间内，插件代码可能被运行多次。</p><p><img src="https://static001.geekbang.org/resource/image/d9/9b/d94bcbb1ff5e097660a9262cf485039b.png" alt="VS Code Architectur"></p><p>为了保证插件的高效运行，VS Code 使用了 Dispose 模式，大部分插件 API 都实现了 IDisposable 接口，生成的对象则会拥有一个 dispose 函数属性。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IDisposable &#123;</span><br><span class="line">truedispose(): <span class="hljs-keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dispose 模式主要用来资源管理，资源比如内存被对象占用，则会通过调用方法来释放，这些方法通常被命名为‘close’，‘dispose’，‘free’，‘release’。一个著名的例子便是 C#，C#通过 Dipose Pattern 来释放不受 CLR(Common Language Runtime)管理的非托管资源。</p><p>VS Code 是由 Javascript 实现的，众所周知，Javascript 的内存分配是通过 GC(garbage collector)进行管理，大部分情况下它都是自动执行且对用户不可见的。然而这种自动化的管理方式却存在一个潜在的问题，就是 Javascript 开发者会错误的认为他们不需要再关心内存管理了，从而再无意间书写一些不利于内存回收的代码。</p><p>所以，最清楚被分配的内存在未来是否需要使用的还是开发者，但是每次使用完一个对象后就手动的将其销毁，这样的做法即不高效，也不可靠。正因为此，VS Code 使用了 Dispose Pattern 来管理对象销毁。当扩展功能执行时，Extension Host 会在正确的时机调用 dispose 方法，销毁 Code 生成的对象，减少内存使用。比如说，方法‘setStatusBarMessage(value: string)’返回一个‘Disposable’对象，当调用 dispose 方法的时候会移除掉信息对象。</p><p><img src="https://haitao.nos.netease.com/94397bbc-f94b-4015-a7c2-ec53cf71e197_589_311.jpg" alt="Dispose Pattern"></p><p>Dispose pattern 的实现如下</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 第一个重载参数是单个disposable类型</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispose</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">IDisposable</span>&gt;(<span class="hljs-params">disposable: T</span>): <span class="hljs-title">T</span>;</span></span><br><span class="line"><span class="hljs-function">// 第二个重载参数是多个<span class="hljs-title">disposable</span>类型传参数，参数可能为<span class="hljs-title">undefined</span>。</span></span><br><span class="line">function dispose&lt;T extends IDisposable&gt;(...disposables: Array&lt;T | undefined&gt;): T[];</span><br><span class="line"><span class="hljs-comment">// 第三个重载参数是一个disposable类型的数组。</span></span><br><span class="line">function dispose&lt;T extends IDisposable&gt;(disposables: T[]): T[];</span><br><span class="line"><span class="hljs-comment">// 第三个重载参数为两种，第一个是disposable类型或disposable数组类型，剩余的为disposable类型。</span></span><br><span class="line">function dispose&lt;T extends IDisposable&gt;(first: T | T[], ...rest: T[]): T | T[] | undefined &#123;</span><br><span class="line">  <span class="hljs-comment">// 如果第一个参数是数组，则依次调用传参数的dispose方法</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(first)) &#123;</span><br><span class="line">  first.forEach(<span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> d &amp;&amp; d.dispose());</span><br><span class="line">  <span class="hljs-comment">// 返回空的数组</span></span><br><span class="line">  <span class="hljs-keyword">return</span> [];</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rest.length === <span class="hljs-number">0</span>) &#123;</span><br><span class="line">   <span class="hljs-comment">// 如果没有没有剩余参数</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (first) &#123;</span><br><span class="line">     <span class="hljs-comment">// 如果存在first</span></span><br><span class="line">     <span class="hljs-comment">// 调用第一个dispose</span></span><br><span class="line">  first.dispose();</span><br><span class="line">    <span class="hljs-comment">// 返回first</span></span><br><span class="line">  <span class="hljs-keyword">return</span> first;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// first不是数组，且rest长度不为0</span></span><br><span class="line">  dispose(first);</span><br><span class="line">  dispose(rest);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 返回空数组</span></span><br><span class="line">  <span class="hljs-keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// implement IDisposable 的Disposable 抽象类</span></span><br><span class="line">abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disposable</span> <span class="hljs-title">implements</span> <span class="hljs-title">IDisposable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Disposable类的静态对象，用于返回一个包含空的dispose方法的IDisposable对象。dispose被执行了，则表示该对象不再需要了。</span></span><br><span class="line">  <span class="hljs-comment">// 部分基础API使用了该对象，用于标志资源释放。</span></span><br><span class="line">true<span class="hljs-keyword">static</span> None = <span class="hljs-built_in">Object</span>.freeze&lt;IDisposable&gt;(&#123; dispose() &#123; &#125; &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// protected属性toDispose返回protected对象_toDispose, 该对象初始值是一个空的数组。</span></span><br><span class="line">trueprotected _toDispose: IDisposable[] = [];</span><br><span class="line">true<span class="hljs-comment">// 返回IDisposable数组。</span></span><br><span class="line">trueprotected get toDispose(): IDisposable[] &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._toDispose; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 设置状态标志，表示该对象是否有被销毁。</span></span><br><span class="line">trueprivate _lifecycle_disposable_isDisposed = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 暴露公共方法dispose，执行完后将_lifecycle_disposable_isDisposed状态标志设为true，同时调用lifecycle内的dispose方法处理_toDispose数组，并重新赋值空数组。</span></span><br><span class="line">truepublic dispose(): <span class="hljs-keyword">void</span> &#123;</span><br><span class="line">truetrue<span class="hljs-keyword">this</span>._lifecycle_disposable_isDisposed = <span class="hljs-literal">true</span>;</span><br><span class="line">truetrue<span class="hljs-keyword">this</span>._toDispose = dispose(<span class="hljs-keyword">this</span>._toDispose);</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 内部方法注册实例，若_lifecycle_disposable_isDisposed为true，则表明该方法已经被dispose过，则不能再使用，需dispose掉，否则，推入_toDispose数组。</span></span><br><span class="line">trueprotected _register&lt;T extends IDisposable&gt;(t: T): T &#123;</span><br><span class="line">true  <span class="hljs-comment">// 判断这个对象有没有被dispose过</span></span><br><span class="line">truetrue<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>._lifecycle_disposable_isDisposed) &#123;</span><br><span class="line">truetruetrue<span class="hljs-built_in">console</span>.warn(<span class="hljs-string">'Registering disposable on object that has already been disposed.'</span>);</span><br><span class="line">truetruetruet.dispose();</span><br><span class="line">truetrue&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="hljs-keyword">this</span>._toDispose.push(t);</span><br><span class="line">truetrue&#125;</span><br><span class="line"></span><br><span class="line">truetrue<span class="hljs-keyword">return</span> t;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展 API 大部分功能类或功能方法都通过上面的抽象类 Disposable 或接口 IDisposable 实现 dispose 方法。下面的函数示例了一个功能类 DelayedDragHandler 如何实现 dispose 方法，当 HTMLElement 的延迟拖动方法执行完后，其实例对象的 timeout 对象会被及时清除，避免内存占用。</p><p><img src="https://haitao.nos.netease.com/0a050e4d-f7f2-417d-9505-98c33bda36df_401_416.jpg" alt="dispose object"></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * A helper that will execute a provided function when the provided HTMLElement receives</span></span><br><span class="line"><span class="hljs-comment"> *  dragover event for 800ms. If the drag is aborted before, the callback will not be triggered.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayedDragHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Disposable</span> </span>&#123;</span><br><span class="line">trueprivate timeout: any;</span><br><span class="line"></span><br><span class="line">true<span class="hljs-keyword">constructor</span>(container: HTMLElement, callback: () =&gt; void) &#123;</span><br><span class="line">truetrue<span class="hljs-keyword">super</span>();</span><br><span class="line"></span><br><span class="line">truetrue<span class="hljs-keyword">this</span>._register(addDisposableListener(container, <span class="hljs-string">'dragover'</span>, () =&gt; &#123;</span><br><span class="line">truetruetrue<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.timeout) &#123;</span><br><span class="line">truetruetruetrue<span class="hljs-keyword">this</span>.timeout = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">truetruetruetruetruecallback();</span><br><span class="line"></span><br><span class="line">truetruetruetruetrue<span class="hljs-keyword">this</span>.timeout = <span class="hljs-literal">null</span>;</span><br><span class="line">truetruetruetrue&#125;, <span class="hljs-number">800</span>);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;));</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">trueprivate clearDragTimeout(): <span class="hljs-keyword">void</span> &#123;</span><br><span class="line">truetrue<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.timeout) &#123;</span><br><span class="line">truetruetrueclearTimeout(<span class="hljs-keyword">this</span>.timeout);</span><br><span class="line">truetruetrue<span class="hljs-keyword">this</span>.timeout = <span class="hljs-literal">null</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truedispose(): <span class="hljs-keyword">void</span> &#123;</span><br><span class="line">truetrue<span class="hljs-keyword">super</span>.dispose();</span><br><span class="line"></span><br><span class="line">truetrue<span class="hljs-keyword">this</span>.clearDragTimeout();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用：</p><ul><li><a href="https://en.wikipedia.org/wiki/Dispose_pattern" target="_blank" rel="noopener">Dispose Pattern</a></li><li><a href="https://wizardforcel.gitbooks.io/effective-csharp/content/19.html" target="_blank" rel="noopener">实现标准的 Dispose 模式</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Mark-and-sweep_algorithm" target="_blank" rel="noopener">Memory Management</a></li><li><a href="https://javascript.info/garbage-collection" target="_blank" rel="noopener">Garbage collection</a></li><li><a href="https://github.com/lrlna/sketchin/blob/master/guides/garbage-collection-in-v8.md#-sourcesjs" target="_blank" rel="noopener">Garbage collection in V8, an illustrated guide</a></li><li><a href="https://code.visualstudio.com/api" target="_blank" rel="noopener">API</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS Code 是微软出品的新一代轻量级编辑器，一出道便以简洁大气的界面、卓越的性能、以及灵活的可扩展性吸引了大批的拥趸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://haitao.nos.netease.com/2b129013-9a04-467f-8b46-b0ebe43b5fea_225_224.png&quot; alt=&quot;VS Code Icon&quot;&gt;&lt;/p&gt;
&lt;p&gt;插件化是 VS Code 的精髓，大部分功能比如 command、key binding、context menu 都是通过它对外提供的一套扩展&lt;a href=&quot;https://code.visualstudio.com/api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;API&lt;/a&gt;实现并集成到 Code 中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vscode" scheme="https://love2ai.com/tags/vscode/"/>
    
      <category term="design pattern" scheme="https://love2ai.com/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>私聊Javascript的Private</title>
    <link href="https://love2ai.com/2019/03/06/%E7%A7%81%E8%81%8AJavascript%E7%9A%84Private/"/>
    <id>https://love2ai.com/2019/03/06/私聊Javascript的Private/</id>
    <published>2019-03-06T19:50:57.000Z</published>
    <updated>2019-04-10T07:57:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，Javascript是一门基于原型编程的动态脚本语言，虽然它也支持面向对象的编程范式，但想要做到像传统编程语言那样使用OOP，Javascript依然存在这样那样的不足。</p><p>从ES6开始，JS开始支持使用Class来编写类，但是该语法依然不够完善，一个显而易见的缺点就是我们无法使用private关键字定义变量。在其它面向对象的语言中，private修饰的成员或方法只能够在其定义的类中的方法中引用，无法通过该类及派生类的对象访问。<br><a id="more"></a></p><p>为了实现Javascript中的private，防止数据在运行时被改变，本文总结了五类方法来达成这一目的，接下来将一一介绍</p><p><img src="https://haitao.nos.netease.com/238ee644-be1b-4932-b1cb-88a9d85e7e15.png" alt=""></p><h3 id="一-使用命名规则-xx"><a href="#一-使用命名规则-xx" class="headerlink" title="一. 使用命名规则 (_xx)"></a>一. 使用命名规则 (_xx)</h3><p>在一个工程中，为了区分代码中的私有成员和公有成员，当我们表示一个成员是私有时，就以下划线开头的命名规则来命名。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Company</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="hljs-comment">//public</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    <span class="hljs-comment">//private</span></span><br><span class="line">    <span class="hljs-keyword">this</span>._asset = <span class="hljs-string">'computer'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getAsset() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._asset;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的Company类中，_asset表示私有成员，只能通过调用getAsset方法来获取。然而我们并不能阻止外部直接访问这个变量并修改它。<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> company = <span class="hljs-keyword">new</span> Company(<span class="hljs-string">'netease'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(company.getAsset());   <span class="hljs-comment">// computer</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(company._asset)    <span class="hljs-comment">// computer</span></span><br><span class="line">company._asset = <span class="hljs-string">'desk'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(company.getAsset());   <span class="hljs-comment">//desk</span></span><br></pre></td></tr></table></figure></p><p>可以看到，使用命名规则并不能真正的使变量私有化，更多的是作为一种编码规范，约定了代码中的哪些成员是私有的，使得在后期的代码维护中可以一目了然。在后面介绍的方法中，我们也将使用这种命名规则来表示私有成员。</p><h3 id="二-使用闭包-closure"><a href="#二-使用闭包-closure" class="headerlink" title="二. 使用闭包 (closure)"></a>二. 使用闭包 (closure)</h3><blockquote><p>闭包是函数和声明该函数的词法环境的组合</p></blockquote><p>下面的例子展示了如何使用闭包封装私有成员变量。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Employee</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">this</span>$ = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>$._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get name() &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>$._name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Employee(...arguments)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name)    <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee._name)   <span class="hljs-comment">// undefined</span></span><br></pre></td></tr></table></figure><p>可以看到，外部环境不能直接访问闭包内的变量‘this$’对象内的属性，从而实现Employee对象成员的私有化。然而闭包的缺点也很明显，便是其所封装的变量常驻内存，如果管理不善，有可能会造成内存泄漏。那么除了使用闭包，是否还有其它方案可以实现对象成员的私有化呢？答案是yes，接下来的章节我们将考察如何使用ES6新增的特性实现Private成员变量。</p><h3 id="三-使用WeakMap"><a href="#三-使用WeakMap" class="headerlink" title="三. 使用WeakMap"></a>三. 使用WeakMap</h3><p>WeakMap是ES6中新增的数据类型，它有一个很大的特点，就是无法遍历，由于WeakMap的key存储的对象是弱引用，所以它的key是无法枚举的。（如果key是可枚举的话，其列表将会受垃圾回收机制的影响，从而得到不确定的结构）利用WeakMap这一特性，我们可以实现对象的私有成员。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 用来保存每个对象实例的私有成员</span></span><br><span class="line"><span class="hljs-keyword">const</span> internal = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (!map.has(obj)) &#123;</span><br><span class="line">    map.set(obj, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> map.get(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">    internal(<span class="hljs-keyword">this</span>)._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> internal(<span class="hljs-keyword">this</span>)._name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name)    <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee._name)   <span class="hljs-comment">// undefined</span></span><br></pre></td></tr></table></figure><p>虽然我们无法直接通过Employee实例访问到私有属性_name，但是由于存储私有成员的WeakMap对象暴露在外部，我们依然可以通过修改WeakMap来达到访问并修改employee私有成员的目的。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.get(employee)._name = <span class="hljs-string">'boss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name)   <span class="hljs-comment">// 'boss'</span></span><br></pre></td></tr></table></figure><p>所以为了更进一步的优化，WeakMap往往会结合闭包来实现私有成员。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Employee</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> private = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">const</span> internal = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!private.has(obj)) &#123;</span><br><span class="line">      private.set(obj, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> private.get(obj);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">      internal(<span class="hljs-keyword">this</span>)._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get name() &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> internal(<span class="hljs-keyword">this</span>)._name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Employee(...arguments)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name)    <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee._name)   <span class="hljs-comment">// undefined</span></span><br></pre></td></tr></table></figure><p>因为WeakMap的每个键对自己所引用对象的引用都是 “弱引用”，所以当没有其他引用和该键引用同一个对象时,这个对象将会被当作垃圾回收。这样，闭包所引起的潜在内存泄漏问题就得到来解决。</p><h3 id="四-使用Symbol"><a href="#四-使用Symbol" class="headerlink" title="四. 使用Symbol"></a>四. 使用Symbol</h3><p>同WeakMap一样，Symbol也是ES6新增的基本数据类型。Symbol作为对象属性不可见，意味着无法通过遍历或者JSON.stringify访问到，基于这种特性，我们也可以创建对象的私有属性。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> _name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span></span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>[_name] = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>[_name];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name)    <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee._name)   <span class="hljs-comment">// undefined</span></span><br></pre></td></tr></table></figure><p>使用Symbol来隐藏数据其实也是一种不错的方案，然而同WeakMap一样，它依然有被访问到并修改的风险。通过调用Object.getOwnPropertySymbols()方法，我们可以访问到这个对象的所有Symbol属性，并对其做出修改。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> symbol <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.getOwnPropertySymbols(employee)) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(employee[symbol])  <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-使用Proxy"><a href="#五-使用Proxy" class="headerlink" title="五. 使用Proxy"></a>五. 使用Proxy</h3><p>Proxy也是ES6新增对象，它的作用就是在目标对象之前架设一层“拦截”。当外界访问该对象，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><p>利用这一特性，我们可以按照命名规则，对象的私有属性命名以下划线开头，通过代理属性的get和set方法，拦截外部对对象私有属性的访问，从而实现对象的封装。</p><p>首先我们定义一个包含陷阱的占位符对象handler，其中的陷阱便是get和set，通过这两个陷阱来控制属性的读写。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> handler = &#123;</span><br><span class="line">  get: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, key</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access private Property'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="hljs-keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, key, value</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to accsess private Property'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   target[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两个陷阱代理了get和set，每当要访问对象成员时，都会检测是否私有。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span></span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>), handler);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name);    <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee._name);   <span class="hljs-comment">// Error: Attempt to access private Property</span></span><br><span class="line"></span><br><span class="line">employee._name = <span class="hljs-string">'boss'</span>;  <span class="hljs-comment">// Error: Attempt to access private Property</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(square.area) <span class="hljs-comment">// 100</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(square <span class="hljs-keyword">instanceof</span> Shape)</span><br></pre></td></tr></table></figure><p>当尝试用JSON.stringify序列化employee对象时，因为会访问到私有属性，所以会报错。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">JSON</span>.stringify(employee)   </span><br><span class="line"><span class="hljs-comment">//Error: Attempt to access private Property</span></span><br><span class="line"><span class="hljs-comment">//at Object.get (fawicagejo.js:4:13)</span></span><br><span class="line"><span class="hljs-comment">//at JSON.stringify (&lt;anonymous&gt;)</span></span><br></pre></td></tr></table></figure><p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">MDN</a></p><blockquote><p>如果一个被序列化的对象拥有 toJSON 方法，那么该 toJSON 方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用 toJSON 方法后的返回值会被序列化</p></blockquote><p>所以需要改写get陷阱。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">get: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access private property'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key === <span class="hljs-string">'toJSON'</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] !== <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">        obj[key] = target[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> target[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写完后，再通过JSON.stringify()便能够正常序列化对象了。</p><p>不过以上方法依然存在一个问题，就是使用迭代，我们依然可以访问到对象的私有属性。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我们依然可以通过迭代的形式依然能遍历到私有属性名，比如：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> employee) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// "_name"</span></span><br></pre></td></tr></table></figure></p><p>这个时候，我们需要使用getOwnPropertyDescriptor陷阱，将私有属性的属性描述符中的enumerable设置为false。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getOwnPropertyDescriptor(target, key) &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">    desc.enumerable = <span class="hljs-literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> handler = &#123;</span><br><span class="line">  get: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, key</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access private property'</span>);</span><br><span class="line">   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key === <span class="hljs-string">'toJSON'</span>) &#123;</span><br><span class="line">     <span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">     </span><br><span class="line">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;</span><br><span class="line">       <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] !== <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">         obj[key] = target[key];</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> obj;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="hljs-keyword">return</span> target[key];</span><br><span class="line"> &#125;,</span><br><span class="line">  set: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, key, value</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to accsess private Property'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   target[key] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  getOwnPropertyDescriptor(target, key) &#123;</span><br><span class="line">   <span class="hljs-keyword">const</span> desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">   </span><br><span class="line">   <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;</span><br><span class="line">     desc.enumerable = <span class="hljs-literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="hljs-keyword">return</span> desc;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>), handler);</span><br></pre></td></tr></table></figure><h2 id="新的-符号"><a href="#新的-符号" class="headerlink" title="新的(#)符号"></a>新的(#)符号</h2><p>以上的努力都是在Javascript 新的private特性出来所做的尝试，难免繁琐。</p><p>ES2018最新的Privatet特性已经进入了<a href="https://github.com/tc39/proposals" target="_blank" rel="noopener">https://github.com/tc39/proposals</a> stage3, 我们可以一睹芳容</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;</span><br><span class="line">  #name;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">    this.#name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get name() &#123;</span><br><span class="line">    return this.#name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">'anonymous'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(employee.name)    <span class="hljs-comment">// 'anonymous'</span></span><br><span class="line">console.log(employee.#name)   // undefined</span><br></pre></td></tr></table></figure><p>使用#来描述私有成员，使得Javascript也能像其他高级语言一样实现封装了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>随着新的特性不断涌现，可以看到Javascript是越趋完善，开发者能够体验越来越丰富的功能以提升开发效率。但是我们依然要感谢前人为了实现这些尚未出现的特性所做出的努力，吃水不忘挖井人。</p><p>以上</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://marcusnoble.co.uk/2018-02-04-private-variables-in-javascript/" target="_blank" rel="noopener">private-variables-in-javascript</a></li><li><a href="https://www.sitepoint.com/javascript-private-class-fields/" target="_blank" rel="noopener">javascript-private-class-fields</a></li><li><a href="https://medium.com/@Roger.Jiang/oop-privacy-levels-c1c5a93dd03d" target="_blank" rel="noopener">oop-privacy-levels</a></li><li><a href="https://medium.com/@mnjul/private-class-members-in-es6-a-complete-guide-3d7f83c3af5" target="_blank" rel="noopener">private-class-members-in-es6-a-complete-guide</a></li><li><a href="https://jamie.build/javascripts-new-private-class-fields.html" target="_blank" rel="noopener">javascripts-new-private-class-fields</a></li><li><a href="https://medium.com/@WebReflection/js-classes-got-an-upgrade-747a7c088471" target="_blank" rel="noopener">js-classes-got-an-upgrade</a></li><li><a href="https://tc39.github.io/proposal-class-fields/" target="_blank" rel="noopener">proposal-class-fields</a></li><li><a href="https://itnext.io/fun-with-stamps-episode-21-private-data-in-javascript-4-ways-using-stamps-f43ba93e25bb" target="_blank" rel="noopener">private-data-in-javascript-4-ways-using-stamps</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，Javascript是一门基于原型编程的动态脚本语言，虽然它也支持面向对象的编程范式，但想要做到像传统编程语言那样使用OOP，Javascript依然存在这样那样的不足。&lt;/p&gt;
&lt;p&gt;从ES6开始，JS开始支持使用Class来编写类，但是该语法依然不够完善，一个显而易见的缺点就是我们无法使用private关键字定义变量。在其它面向对象的语言中，private修饰的成员或方法只能够在其定义的类中的方法中引用，无法通过该类及派生类的对象访问。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://love2ai.com/tags/Javascript/"/>
    
      <category term="语法" scheme="https://love2ai.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>健康是一</title>
    <link href="https://love2ai.com/2018/12/28/%E5%81%A5%E5%BA%B7%E6%98%AF%E4%B8%80/"/>
    <id>https://love2ai.com/2018/12/28/健康是一/</id>
    <published>2018-12-28T11:12:35.000Z</published>
    <updated>2019-04-10T07:57:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>今年的互联网有点寒冷，大批的公司裁员，整个互联网从业人员人心惶惶。作为一名小小前端仔，也是时刻处在下岗失业，房贷断供的焦虑之中。也许正是这种焦虑，我开始失眠，先开始十二点半，到一点，再到最近的两点。我的休息时间越来越短，然而夜深人静的时刻，我依然难以入眠。<br><a id="more"></a><br>说来也是，这种情况从我工作之后就一直存在，长期性的每天工作到九、十点，对身体的伤害已经开始显现，精神上也开始逐渐的萎靡，而我才二十七八岁！前几日去了爱康做了公司的年度体检，来来回回做了十几个项目，想来也是把身体的大小器官检查了个便。结果出来后，我的咽、牙周、泌尿、胆、甲状腺均存在问题，虽不算严重，却也应当引起重视。</p><p>互联网人普遍存在拿命换钱的现象，记得双十一的时候，我去医院看了下咽喉。旁边有一个妹子在看病，医生说年轻人还是少熬点夜，你的这些毛病都是熬夜引起的。然而妹子却很不耐烦的说，没有办法啊，双十一肯定要加班的呀，都是KPI啊。也许，这个行业给了很多家境不好的同学人生逆袭的希望，但同时也把他们拉入了资本吸血的陷阱。君不见晚上十点的网商路，却是滴滴司机聚会的好去处，网易、阿里大楼，灯火通明，时有三三两两疲惫的身躯缓缓的走出大门，默默的驻立在大门两边，等待着三四公里外的司机。而我也是这些人群中的一员，每次走出大门，听着身后一声一声的滴滴刷卡声，我不禁疑惑，这一天究竟干了什么？脑袋已经开始迟钝，身体早已僵硬。</p><p>时不时的，小组群里会发一些某某公司的员工猝死的消息，大家都会一阵感慨，纷纷开始叙说自己熬夜的情况，无一不指向任务繁重，加班成瘾。为什么任务会这么多，有多少任务又是真正有意义的呢？一个活动上线六七天，然后永久下线，最终变成一个404，却要耗费七八个人一个多月的辛劳与努力，这些时光最后也成为我们生命中的404，meaningless。</p><p>可悲的是，我们这一代人的现状还将继续，继续很久很久。国家老龄化趋势不可逆转，新生儿跌破1500万大关。不出五年，大批的老年人退休，中国正式进入老年化。而要支撑国家的，正是我们这一代人，可悲的一代。也许继续牺牲着健康做着996的工作，春蚕到死丝方尽，蜡炬成灰泪始干。</p><p>整个社会的现状难以改变，能做的只有改变自己，是时候放下手机，站起来动一动了。健康是一，是一切的基础，我不想某天坐在工位上，突然意识模糊，跌落在地，任由旁边的人围观自己狼狈的模样，而后成为互联网上有一个话题，别人口中的谈资。生活不是为了别人，是为了自己成为想成为的那个人，而健康，就是让之成真的保障。</p><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年的互联网有点寒冷，大批的公司裁员，整个互联网从业人员人心惶惶。作为一名小小前端仔，也是时刻处在下岗失业，房贷断供的焦虑之中。也许正是这种焦虑，我开始失眠，先开始十二点半，到一点，再到最近的两点。我的休息时间越来越短，然而夜深人静的时刻，我依然难以入眠。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://love2ai.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="思考" scheme="https://love2ai.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>读《兄弟》后感</title>
    <link href="https://love2ai.com/2017/10/08/%E8%AF%BB%E3%80%8A%E5%85%84%E5%BC%9F%E3%80%8B%E5%90%8E%E6%84%9F/"/>
    <id>https://love2ai.com/2017/10/08/读《兄弟》后感/</id>
    <published>2017-10-08T22:43:22.000Z</published>
    <updated>2019-04-10T07:57:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>这个国庆假很长，连请假带中秋，整整九天。我并没有去游山玩水，只是宅在家里四五天。宅的时间久了，人就容易发燥，这时候，一本书适时的出现在我面前–余华的《兄弟》。</p><p>第一次认识余华是看了张艺谋的《活着》，我被富贵跌宕起伏的一生所感染，看完电影是鼻涕眼泪抹了一把又一把。心想这故事拍的也太好了，太有深度了，整个中国近一百年的历史被淋漓尽致的刻画到一个小人物身上。当时我知道了这是改编自余华的同名小说<a id="more"></a>， 于是便巴拉了过来细细的读了起来，看完就一个感受，残忍！作者用波澜不惊的笔调叙说着一个又一个死去的故事，这些故事让起先让我触动，接着让我麻木，然而余华却依然不急不缓的给每一个人盖上棺材。看完之后，我心说，这真是一个冷酷的作家。这，是我第一次认识余华。</p><p>《兄弟》，却早于余华被我所接触。还记得初中那年，当时家里订的扬子晚报的文学版块会连载一些文学作品，《兄弟》正是在某个时间段占据了报纸的一隅。第一次看《兄弟》，是被封面两个傻傻的大头所吸引，不知怎的，这张封面很对我的胃口。后来我知道，这两个人一个叫宋钢，一个叫李光头，他们是兄弟。</p><p>当我国庆再次翻阅《兄弟》时，当时看书的记忆有些竟然涌了上来。我记得自己当初并没有读完《兄弟》，除了这个，唯一还停留在我记忆深处的是小说中的一个片段，孙伟被剃头。孙伟因为留了一头长发要被红卫兵剃头，在反抗的时候，红卫兵的剃刀割破了孙伟的动脉，那血冲出去三米多高。这一画面深深的深深的印在了我幼小的脑海中，一直挥之不去。我不知道自己有没有被这一段所刺激到，但是后来，阅读《兄弟》的记忆就不再出现了。</p><p>当我在回家的车上把《兄弟》的最后一段给读完时，车窗外已是凌晨。我长圩了一口气，也算是了了一桩心事。是的，和很多人的感知一样，兄弟这本书是割裂的，余华把它分为上下部也不无道理。有的人觉得下半部写的不好，人物太过脸谱化，显得整个故事虚假，这点我赞同。整个故事就在刘镇的舞台上发生，荒诞不羁，然而你安能说他不反应现实？类似的故事比比皆是，只不过余华将所有改革开放后发生的丑陋集中到了一起，所以显得不真。</p><p>再说上部，这时候我们能站在远处，用望远镜观测那个年代发生的一切。说实话，对于一个没有经历过文革的人，依然能从余华的字里行间感受到那个年代的癫狂，而在这份癫狂之下，宋凡平一家显得如此与众不同。我想每一个看完小说的人，不管对小说本身评价如何，都不会吝啬对宋平凡竖起一个大拇指，并大声说上一句，真是个好汉。他是个当代的英雄，用自己伟岸的身躯守卫着小小的家，他的完美与整个刘镇群众是格格不入的。于是，像任何美好的人，美好的事物一样。宋平凡也难逃被摧残的命运。前一天他像个英雄一样被人民群众高高的捧起，转一天，他就被全镇的人所唾骂，所攻击。每每想到此，我总会记起legal high中古美门那段关于民意的辩论。“真正的恶魔，正是无限膨胀的民意，是坚信自己是善人，对落入阴沟的肮脏野狗进行群殴的“善良的”市民”。讽刺吧，对于人民群众，尖锐的批评家们从不手软，余华也是如此，围绕着李光头一家所发生一切，刘镇的群众，每个人都是参与者。余华将他们的丑恶嘴脸刻画的玲离尽致，任何人，都难逃他的责难。</p><p>对于小说的主人翁，宋钢和李光头两兄弟，对于发生在他俩身上截然不同的人生，以及和他们共同的女人林红发生的故事。我只想说，作者，你开心就好，正如其在后记里说的那样，有时候写作就是这样奇妙，从狭窄开始往往写出宽广，从宽广开始反而写出狭窄。至于《兄弟》最后是狭窄了还是宽广了，每个人心中都会评判。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个国庆假很长，连请假带中秋，整整九天。我并没有去游山玩水，只是宅在家里四五天。宅的时间久了，人就容易发燥，这时候，一本书适时的出现在我面前–余华的《兄弟》。&lt;/p&gt;
&lt;p&gt;第一次认识余华是看了张艺谋的《活着》，我被富贵跌宕起伏的一生所感染，看完电影是鼻涕眼泪抹了一把又一把。心想这故事拍的也太好了，太有深度了，整个中国近一百年的历史被淋漓尽致的刻画到一个小人物身上。当时我知道了这是改编自余华的同名小说&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://love2ai.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
